// Code generated by go-bindata. DO NOT EDIT.
// sources:
// schema.json

package schema


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xcd\x8e\x9b\x30\x10\xbe\xe7\x29\x2c\xb6\xa7\xaa\x1b\x7a\xab\x94\xdb\xaa\x3d\xf4\x52\xa9\x52\x8f\xd5\x1e\xbc\x30\x10\xaf\x88\xa1\xc6\x54\x8a\x56\x79\xf7\x2a\x06\x1c\x0c\xb6\xf9\x33\x59\x90\x9a\xc3\x4a\x19\xc6\xe3\xf1\x37\x7f\x9f\xc9\xbe\xed\x10\x42\xc8\xfb\x90\x07\x47\x38\x61\xef\x80\xbc\x23\xe7\xd9\xc1\xf7\x5f\xf3\x94\x3e\x96\xd2\x7d\xca\x62\x3f\x64\x38\xe2\x8f\x9f\xbf\xf8\xa5\xec\xc1\xfb\x54\xae\x64\xf0\xa7\x20\x0c\x42\xef\x80\x7e\x0b\x89\x90\x52\x7c\x82\x4a\x43\x7c\xe7\xe7\x4c\xf9\xfe\x17\x58\x4e\x52\xda\x14\x85\x90\x07\x8c\x64\xbc\x25\xc6\x59\xf6\x23\x0d\x21\x51\xac\x31\x12\xc7\xc0\x72\x4f\x88\x9e\x2b\x4f\x32\x96\x66\xc0\x38\x81\xdc\x3b\xa0\xb7\x86\x85\xe0\x6a\x53\x15\x8a\x07\x84\xc3\xa9\x2b\x9e\x87\x87\x6a\x85\x41\x74\x35\xf1\xe0\x87\x10\x11\x4a\x84\x1f\x7e\xe9\xcf\xfe\x6b\x4a\x23\x12\x7b\xca\xaa\x8b\x6a\xa4\x84\xed\x80\x3c\xcc\x18\x3e\xdf\x54\x2f\x3a\x7c\x3a\xc7\xab\x17\xe7\x9c\x11\x1a\xeb\x57\x07\x47\x4c\x29\x24\xe3\xc0\x31\x19\x9e\x78\x82\x20\xa5\x14\x4c\x31\xca\x30\xe7\xc0\xe8\x4f\x7d\x6c\xa5\xda\xfe\xa3\x56\x8e\x9c\xc5\x12\x99\xe3\x79\xf3\x5f\x1b\x53\x71\xdc\x41\x18\xa5\x2f\xaf\x10\x70\x3d\x48\xcd\xea\x98\x14\x69\x72\xca\x52\xc6\xdf\x35\xd0\xa2\x29\x4c\x72\xde\x50\xda\x7d\xfe\x2f\x59\xc5\x21\xe6\x78\xff\xc4\x39\x23\x2f\x05\x87\xd9\xd8\x30\xc8\xd3\x82\x05\x2b\x3a\x60\xed\x91\xab\x46\x55\x3a\xb0\xcd\x12\xaf\x0c\x7d\x83\x68\x89\xda\x96\xe3\x6c\x2d\xa1\xaf\x1c\x72\x15\xf9\x4a\x65\x42\xdd\xd7\x34\x61\xf8\xe2\x5d\xc3\x84\x87\xc3\x50\x9c\x08\x27\x4a\x72\x45\x38\xc9\xa1\x52\x69\xc5\xa7\x92\x36\xc0\x50\xb9\xc4\xbe\xeb\x8a\x96\x00\xc9\xa7\x2d\x22\xa4\x1e\x40\x23\xef\x12\x23\xf9\x48\x4f\x90\xe4\x63\x0d\x51\xba\xed\xa6\x10\xa6\xfa\xf3\xdc\x0a\xa5\xa5\xcb\x22\x1b\x91\x92\x0a\xe6\x74\x95\x2a\xce\x2a\x15\x4d\x22\x58\xf5\xe7\x62\x28\x7f\x43\x36\x5b\x96\x99\x09\x58\xc7\xa8\x6e\x8c\x9a\xac\x1a\x89\x99\xd4\x18\x00\x76\xdf\xc6\x86\xcd\xd1\x44\x24\x6c\x44\x4e\x2a\x0d\xeb\xf6\x52\xdd\xd2\xf5\xa5\x8e\xd3\x9c\x42\xb3\x88\x9e\x84\x67\x12\xd6\xed\x21\x61\x59\x67\x25\x84\x1d\xc3\x63\x32\xcf\x44\x14\x6f\x0a\xab\x4b\x3c\x2d\xb1\x1c\xec\x8c\xce\x62\x4f\x2b\x44\x2b\xea\x76\x36\x22\x6a\x39\x22\x9a\x88\xb5\x99\xa8\xae\x0d\x18\x2b\x81\x5d\x00\x19\x13\xc1\x95\x0a\x1b\x6e\x7d\x36\x02\x2c\x31\x59\xbc\xe7\x19\x89\xb2\xd4\x58\x49\xea\xd9\x08\xf4\x50\x60\x46\x64\x9e\x96\x60\x77\x0c\x8e\xe9\x7f\x26\xe2\x3d\xdc\xa8\xf5\xd2\xd0\x4f\xcc\x3b\x1b\xd9\x2e\x50\x2a\xe1\xeb\x5e\x30\x7b\x78\x2d\x09\xdd\x82\x57\xa6\x84\x43\x83\x39\x70\x4e\x68\x6c\xc9\xfb\x49\xd5\x34\x2f\x6b\xee\x19\xe0\x2e\xf3\x1a\x1d\xe4\x35\x06\xe5\x9e\x10\xb6\x68\x42\x07\x3f\xc7\xdb\xb5\x87\xef\xc8\x6b\x33\x09\xb5\x37\x60\xcc\xf1\xbc\x2b\xac\xb0\xe0\xb4\x8a\x66\x35\x8f\x7b\x26\x40\x63\x84\x8f\x0c\x86\xf1\x5d\x05\x4e\x0a\x98\x17\x8f\x05\x26\x97\x70\x6a\x1b\x21\xa9\x69\xc2\x93\x68\x6d\x6b\x19\x5f\xc4\x71\xa3\x24\x34\x2b\xb8\xdb\xa2\x4b\x0b\xee\xdc\xe6\x1a\x07\xc4\xb6\xa7\x76\x8b\x05\x3b\x19\x01\xd7\x28\xd9\xb0\xd6\x3c\x3b\x62\x1a\x26\xb3\x5f\x7e\x4a\x2b\x5b\xb9\x7b\x7c\x2f\x1d\xbe\xd3\x15\xe4\x3f\x87\x9e\xe2\xe7\x7b\x54\xa3\x9a\x17\x23\x8b\xd2\x56\x67\xf5\xcf\x03\xb3\xca\x6c\x2b\xbf\x31\x68\x47\xf7\xd2\x45\xe6\xfe\x3d\x67\xef\x3b\xab\xa5\x7f\x59\xad\x71\xfc\x25\x16\x1b\xff\x7f\x62\xfb\xf7\x2f\xed\x41\x47\x73\xbd\x65\x88\x4f\x96\x9c\xd7\x8c\xe2\xae\xfc\x7b\xf9\x17\x00\x00\xff\xff\xe6\xed\x51\x98\xac\x26\x00\x00")

func bindataSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_bindataSchemaJson,
		"schema.json",
	)
}



func bindataSchemaJson() (*asset, error) {
	bytes, err := bindataSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "schema.json",
		size: 9900,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1628669912, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"schema.json": bindataSchemaJson,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"schema.json": {Func: bindataSchemaJson, Children: map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
